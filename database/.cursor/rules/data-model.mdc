---
description:
globs:
alwaysApply: false
---

## Database rules 

**Event-Sourced Knowledge Graph**: Immutable event history with current state tracking.

The database is a multi-modal knowledge graph + real-time streaming data store. You value rich connections between data and interoperable standards. 

## Key Design Principles

1. **Single-Table Inheritance**: All entities use the same `entities` table with `entity_type` differentiation
2. **User-First Creation**: Organizations must be created by an existing user who automatically becomes the organization owner. Empty organizations without any members are not allowed.
3. **Entity Association**: Users have a one-to-one relationship with an Entity record
4. **Organization Membership**: Users can belong to organizations via `organization_id` field
5. **Permission-Based Access**: Access control based on user roles and organization membership

### Data Model & Database tools:
PostgreSQL — primary relational database
TimescaleDB — PostgreSQL extension for time-series data (sensor readings, events)
Single-table inheritance: all entities (users, devices, organizations, etc.) stored in a unified entities table, differentiated by entity_type
Events table: immutable event log for all changes (event sourcing pattern)
Relationships table: supports graph-style links between entities
JSONB columns: flexible, schema-less properties for entities and events
Alembic: schema migrations and versioning
Indexes: optimized for organization, entity type, and time-based queries
Audit trail: all changes tracked for compliance and traceability

The model is designed for multi-tenancy, flexible schema evolution, and efficient time-series analytics.

### TimescaleDB Configuration

- **Hypertables**: Events table partitioned by time
- **Compression**: Automatic data compression for historical data
- **Retention Policies**: Automatic data retention and cleanup
- **Continuous Aggregates**: Pre-computed aggregations for analytics


### Core Tables

#### 1. **Entities Table (Single-Table Inheritance)**
```sql
CREATE TABLE entities (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    entity_type VARCHAR(100) NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    organization_id UUID REFERENCES entities(id),
    properties JSONB NOT NULL DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

#### 2. **Users Table**
```sql
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    entity_id UUID NOT NULL REFERENCES entities(id),
    email VARCHAR(255) UNIQUE NOT NULL,
    hashed_password VARCHAR(255) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    is_superuser BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

#### 3. **Events Table (Time-series Data)**
```sql
CREATE TABLE events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    entity_id UUID NOT NULL REFERENCES entities(id),
    event_type VARCHAR(100) NOT NULL,
    data JSONB NOT NULL DEFAULT '{}',
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

#### 4. **Relationships Table (Graph Relationships)**
```sql
CREATE TABLE relationships (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    from_entity UUID NOT NULL REFERENCES entities(id),
    to_entity UUID NOT NULL REFERENCES entities(id),
    relationship_type VARCHAR(100) NOT NULL,
    properties JSONB NOT NULL DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### Code Patterns
- Use `async def` for all database operations
- Type hints on all functions
- Pydantic for validation
- Background tasks for data processing
- UTC timestamps everywhere
- Event-sourcing: Create events for all state changes
- Schema validation: Validate entities against JSON schemas

### Database Operations
```python
# Migration management
python backend/db/setup_db.py          # Apply migrations
python backend/db/check_migrations.py  # Check status
docker compose up --build -d db-init   # Docker setup

# Migrations follow alphabetical order with rollback support
# Example: 001_initial_schema.sql, 001_initial_schema_rollback.sql
```

### Graph Queries
```python
# Find all active devices connected to a process instance
async def get_process_devices(db: AsyncSession, process_instance_id: UUID):
    return await db.execute("""
        SELECT e.* FROM entities e
        JOIN relationships r ON r.to_entity = e.id
        WHERE r.from_entity = :process_id 
        AND r.relationship_type = 'monitors'
        AND r.valid_to IS NULL
        AND e.entity_type LIKE 'device.%'
        AND e.status = 'active'
    """, {"process_id": process_instance_id})

# Get entity history from events
async def get_entity_timeline(db: AsyncSession, entity_id: UUID, days: int = 7):
    return await db.execute("""
        SELECT timestamp, event_type, data, metadata
        FROM events 
        WHERE entity_id = :entity_id
        AND timestamp > NOW() - INTERVAL ':days days'
        ORDER BY timestamp DESC
    """, {"entity_id": entity_id, "days": days})

# Find relationships with strength threshold
async def get_strong_connections(db: AsyncSession, entity_id: UUID, min_strength: float = 0.7):
    return await db.execute("""
        SELECT r.*, e.name, e.entity_type 
        FROM relationships r
        JOIN entities e ON e.id = r.to_entity
        WHERE r.from_entity = :entity_id
        AND r.strength >= :min_strength
        AND r.valid_to IS NULL
    """, {"entity_id": entity_id, "min_strength": min_strength})
```

### SQL Conventions
- Use `IF NOT EXISTS` for all CREATE statements
- Explicit defaults: `DEFAULT '{}'` for JSONB, `DEFAULT NOW()` for timestamps
- UUID generation: `uuid_generate_v4()` or `gen_random_uuid()`
- Cascade deletes for maintaining referential integrity
- Descriptive column names with underscores (not camelCase)
- Comments for complex columns (e.g., `-- 0.0-1.0` for strength)
- Status fields use VARCHAR(50) with string values ('active', 'running')
- Composite primary keys for time-series tables: `PRIMARY KEY (timestamp, id)`


## Scientific Data Guidelines

- Validate sensor ranges (e.g., temperature: -50°C to 150°C)
- Store UTC timestamps with microsecond precision
- Implement data retention (archive >1 year)
- Batch insert high-frequency sensor data
- Version control experiment protocols
- Maintain audit trail for GLP compliance)
);

```sql
-- Schema validation for entity types
CREATE TABLE schemas (
    entity_type VARCHAR(100) PRIMARY KEY,
    json_schema JSONB NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Process templates and instances
CREATE TABLE processes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    entity_type VARCHAR(100) DEFAULT 'process',
    steps JSONB NOT NULL
);

CREATE TABLE process_instances (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    process_id UUID REFERENCES processes(id),
    entity_id UUID REFERENCES entities(id),
    state JSONB NOT NULL,
    started_at TIMESTAMPTZ DEFAULT NOW()
);

-- Indexes for graph traversal
CREATE INDEX idx_entities_type ON entities(entity_type);
CREATE INDEX idx_relationships_from ON relationships(from_entity_id, relationship_type);
CREATE INDEX idx_relationships_to ON relationships(to_entity_id, relationship_type);
CREATE INDEX idx_relationships_temporal ON relationships(valid_from, valid_to);
```

### Event Flow Pattern
```python
# All changes go through events
async def update_entity(db: AsyncSession, entity_id: UUID, changes: dict):
    # 1. Create immutable event
    event = Event(
        event_type="entity.updated",
        entity_id=entity_id,
        data=changes
    )
    db.add(event)
    
    # 2. Trigger updates current state (via DB trigger or application)
    # 3. Relationships maintain graph consistency
```

### Entity Examples
```python
# ESP32 device as entity
device_entity = {
    "entity_type": "device.esp32",
    "properties": {
        "firmware_version": "1.0.0",
        "hardware_revision": "v2",
        "sensors": ["BME680", "DS18B20"],
        "status": "active"
    }
}

# Experiment as entity  
experiment_entity = {
    "entity_type": "experiment.fermentation",
    "properties": {
        "name": "Batch 2024-001",
        "protocol_id": "proto-123",
        "parameters": {"temperature": 25.0}
    }
}
```

### Code Patterns
- Use `async def` for all database operations
- Type hints on all functions
- Pydantic for validation
- Background tasks for data processing
- UTC timestamps everywhere